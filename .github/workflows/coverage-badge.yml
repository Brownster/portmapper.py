name: Generate Coverage Badge

on:
  workflow_run:
    workflows: ["Pylint & Testing"]
    types:
      - completed

jobs:
  coverage-badge:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint pytest PyYAML pandas pdfkit pytest-cov
          pip install -r requirements.txt
          
      - name: Create firewall_check.sh script for testing
        run: |
          touch firewall_check.sh
          echo '#!/bin/bash' > firewall_check.sh
          echo '# Test firewall check script' >> firewall_check.sh
          echo 'echo "Firewall connectivity check tool"' >> firewall_check.sh
          chmod +x firewall_check.sh
          
      - name: Run tests with coverage
        run: |
          pytest test_app.py test_app_coverage.py --cov=app --cov-report=xml --cov-report=term
          
      - name: Extract coverage percentage
        id: extract_coverage
        run: |
          COVERAGE=$(pytest test_app.py test_app_coverage.py --cov=app --cov-report=term | grep app.py | awk '{print $4}' | tr -d '%')
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "Coverage percentage: $COVERAGE%"
          
      - name: Determine badge color
        id: badge_color
        run: |
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            echo "BADGE_COLOR=green" >> $GITHUB_ENV
          elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
            echo "BADGE_COLOR=yellow" >> $GITHUB_ENV
          else
            echo "BADGE_COLOR=red" >> $GITHUB_ENV
          fi
          
      - name: Create the badge directory
        run: mkdir -p .github/badges
          
      - name: Generate coverage badge
        uses: emibcn/badge-action@v1
        with:
          label: 'coverage'
          status: '${{ env.COVERAGE }}%'
          color: '${{ env.BADGE_COLOR }}'
          path: '.github/badges/coverage.svg'
          
      - name: Commit and push badge
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/badges/coverage.svg
          git commit -m "Update coverage badge" || echo "No changes to commit"
          git push