#!/bin/bash
# Firewall Check Script for Portmapper
# This script tests if the ports specified in a firewall_check CSV are open

# Default timeout in seconds
TIMEOUT=2

# Usage function
usage() {
    echo "Usage: $0 -f <firewall_check_csv_file> [-t <timeout_seconds>]"
    echo ""
    echo "Options:"
    echo "  -f <file>    Firewall check CSV file generated by Portmapper"
    echo "  -t <seconds> Connection timeout in seconds (default: $TIMEOUT)"
    echo "  -h           Display this help message"
    exit 1
}

# Parse command line options
while getopts "f:t:h" opt; do
    case $opt in
        f) CSV_FILE="$OPTARG" ;;
        t) TIMEOUT="$OPTARG" ;;
        h) usage ;;
        *) usage ;;
    esac
done

# Check if CSV file is provided
if [ -z "$CSV_FILE" ]; then
    echo "Error: CSV file is required."
    usage
fi

# Check if CSV file exists
if [ ! -f "$CSV_FILE" ]; then
    echo "Error: File '$CSV_FILE' does not exist."
    exit 1
fi

# Create a temp file for output
OUTPUT_FILE="${CSV_FILE%.csv}_results.csv"
TEMP_FILE=$(mktemp)

# Copy header from input file to output file
head -1 "$CSV_FILE" > "$OUTPUT_FILE"

# Skip the header line and process each entry
tail -n +2 "$CSV_FILE" | while IFS=, read -r TARGET_FQDN TARGET_IP PROTOCOL PORT STATUS; do
    echo -n "Testing $TARGET_FQDN ($TARGET_IP) - $PROTOCOL:$PORT... "
    
    # Remove any quotes
    TARGET_IP=$(echo $TARGET_IP | tr -d '"')
    PORT=$(echo $PORT | tr -d '"')
    PROTOCOL=$(echo $PROTOCOL | tr -d '"')
    
    # Different test based on protocol
    if [[ "${PROTOCOL,,}" == "tcp" ]]; then
        # Test TCP port
        nc -z -w "$TIMEOUT" "$TARGET_IP" "$PORT" > /dev/null 2>&1
        RESULT=$?
    elif [[ "${PROTOCOL,,}" == "udp" ]]; then
        # Test UDP port (less reliable)
        nc -z -u -w "$TIMEOUT" "$TARGET_IP" "$PORT" > /dev/null 2>&1
        RESULT=$?
    elif [[ "${PROTOCOL,,}" == "icmp" || "${PROTOCOL,,}" == "ping" ]]; then
        # Test ICMP
        ping -c 1 -W "$TIMEOUT" "$TARGET_IP" > /dev/null 2>&1
        RESULT=$?
    else
        # Unknown protocol
        echo "UNSUPPORTED"
        RESULT=2
    fi
    
    # Set status based on result
    if [ $RESULT -eq 0 ]; then
        STATUS="OPEN"
        echo "OPEN"
    else
        STATUS="CLOSED"
        echo "CLOSED"
    fi
    
    # Add the result to the output file (with quotes for CSV format)
    echo "\"$TARGET_FQDN\",\"$TARGET_IP\",\"$PROTOCOL\",\"$PORT\",\"$STATUS\"" >> "$TEMP_FILE"
done

# Append results to the output file
cat "$TEMP_FILE" >> "$OUTPUT_FILE"
rm "$TEMP_FILE"

# Print summary
TOTAL=$(grep -c . "$OUTPUT_FILE")
OPEN=$(grep -c "OPEN" "$OUTPUT_FILE")
CLOSED=$(grep -c "CLOSED" "$OUTPUT_FILE")

echo ""
echo "===== Firewall Check Summary ====="
echo "Total ports tested: $((TOTAL-1))"
echo "Open ports: $OPEN"
echo "Closed ports: $((CLOSED-1))"
echo "Results saved to: $OUTPUT_FILE"